// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FaceRecognition/ImageProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ImageProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ImageProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FaceRecognition_2fImageProto_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_FaceRecognition_2fImageProto_2eproto() {
  protobuf_AddDesc_FaceRecognition_2fImageProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FaceRecognition/ImageProto.proto");
  GOOGLE_CHECK(file != NULL);
  ImageProto_descriptor_ = file->message_type(0);
  static const int ImageProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProto, personname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProto, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProto, cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProto, rows_),
  };
  ImageProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImageProto_descriptor_,
      ImageProto::internal_default_instance(),
      ImageProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(ImageProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProto, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FaceRecognition_2fImageProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImageProto_descriptor_, ImageProto::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FaceRecognition_2fImageProto_2eproto() {
  ImageProto_default_instance_.Shutdown();
  delete ImageProto_reflection_;
}

void protobuf_InitDefaults_FaceRecognition_2fImageProto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  ImageProto_default_instance_.DefaultConstruct();
  ImageProto_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_FaceRecognition_2fImageProto_2eproto_once_);
void protobuf_InitDefaults_FaceRecognition_2fImageProto_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_FaceRecognition_2fImageProto_2eproto_once_,
                 &protobuf_InitDefaults_FaceRecognition_2fImageProto_2eproto_impl);
}
void protobuf_AddDesc_FaceRecognition_2fImageProto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_FaceRecognition_2fImageProto_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n FaceRecognition/ImageProto.proto\"J\n\nIm"
    "ageProto\022\022\n\npersonName\030\001 \001(\t\022\014\n\004data\030\002 \003"
    "(\005\022\014\n\004cols\030\003 \001(\005\022\014\n\004rows\030\004 \001(\005B.\n xin.ma"
    "rico.facerecogition.entityB\nImageProtob\006"
    "proto3", 166);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FaceRecognition/ImageProto.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FaceRecognition_2fImageProto_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_FaceRecognition_2fImageProto_2eproto_once_);
void protobuf_AddDesc_FaceRecognition_2fImageProto_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_FaceRecognition_2fImageProto_2eproto_once_,
                 &protobuf_AddDesc_FaceRecognition_2fImageProto_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FaceRecognition_2fImageProto_2eproto {
  StaticDescriptorInitializer_FaceRecognition_2fImageProto_2eproto() {
    protobuf_AddDesc_FaceRecognition_2fImageProto_2eproto();
  }
} static_descriptor_initializer_FaceRecognition_2fImageProto_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageProto::kPersonNameFieldNumber;
const int ImageProto::kDataFieldNumber;
const int ImageProto::kColsFieldNumber;
const int ImageProto::kRowsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageProto::ImageProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_FaceRecognition_2fImageProto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageProto)
}

void ImageProto::InitAsDefaultInstance() {
}

ImageProto::ImageProto(const ImageProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ImageProto)
}

void ImageProto::SharedCtor() {
  personname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cols_, 0, reinterpret_cast<char*>(&rows_) -
    reinterpret_cast<char*>(&cols_) + sizeof(rows_));
  _cached_size_ = 0;
}

ImageProto::~ImageProto() {
  // @@protoc_insertion_point(destructor:ImageProto)
  SharedDtor();
}

void ImageProto::SharedDtor() {
  personname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageProto_descriptor_;
}

const ImageProto& ImageProto::default_instance() {
  protobuf_InitDefaults_FaceRecognition_2fImageProto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ImageProto> ImageProto_default_instance_;

ImageProto* ImageProto::New(::google::protobuf::Arena* arena) const {
  ImageProto* n = new ImageProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageProto)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImageProto, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImageProto*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cols_, rows_);
  personname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  data_.Clear();
}

bool ImageProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImageProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string personName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_personname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->personname().data(), this->personname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageProto.personName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated int32 data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cols;
        break;
      }

      // optional int32 cols = 3;
      case 3: {
        if (tag == 24) {
         parse_cols:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cols_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rows;
        break;
      }

      // optional int32 rows = 4;
      case 4: {
        if (tag == 32) {
         parse_rows:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImageProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImageProto)
  return false;
#undef DO_
}

void ImageProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImageProto)
  // optional string personName = 1;
  if (this->personname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->personname().data(), this->personname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageProto.personName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->personname(), output);
  }

  // repeated int32 data = 2;
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->data(i), output);
  }

  // optional int32 cols = 3;
  if (this->cols() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cols(), output);
  }

  // optional int32 rows = 4;
  if (this->rows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rows(), output);
  }

  // @@protoc_insertion_point(serialize_end:ImageProto)
}

::google::protobuf::uint8* ImageProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImageProto)
  // optional string personName = 1;
  if (this->personname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->personname().data(), this->personname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageProto.personName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->personname(), target);
  }

  // repeated int32 data = 2;
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->data(i), target);
  }

  // optional int32 cols = 3;
  if (this->cols() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cols(), target);
  }

  // optional int32 rows = 4;
  if (this->rows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rows(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ImageProto)
  return target;
}

size_t ImageProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageProto)
  size_t total_size = 0;

  // optional string personName = 1;
  if (this->personname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->personname());
  }

  // optional int32 cols = 3;
  if (this->cols() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cols());
  }

  // optional int32 rows = 4;
  if (this->rows() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rows());
  }

  // repeated int32 data = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->data_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->data(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ImageProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageProto)
    UnsafeMergeFrom(*source);
  }
}

void ImageProto::MergeFrom(const ImageProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ImageProto::UnsafeMergeFrom(const ImageProto& from) {
  GOOGLE_DCHECK(&from != this);
  data_.UnsafeMergeFrom(from.data_);
  if (from.personname().size() > 0) {

    personname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.personname_);
  }
  if (from.cols() != 0) {
    set_cols(from.cols());
  }
  if (from.rows() != 0) {
    set_rows(from.rows());
  }
}

void ImageProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageProto::CopyFrom(const ImageProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ImageProto::IsInitialized() const {

  return true;
}

void ImageProto::Swap(ImageProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageProto::InternalSwap(ImageProto* other) {
  personname_.Swap(&other->personname_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(cols_, other->cols_);
  std::swap(rows_, other->rows_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageProto_descriptor_;
  metadata.reflection = ImageProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageProto

// optional string personName = 1;
void ImageProto::clear_personname() {
  personname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ImageProto::personname() const {
  // @@protoc_insertion_point(field_get:ImageProto.personName)
  return personname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageProto::set_personname(const ::std::string& value) {
  
  personname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageProto.personName)
}
void ImageProto::set_personname(const char* value) {
  
  personname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageProto.personName)
}
void ImageProto::set_personname(const char* value, size_t size) {
  
  personname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageProto.personName)
}
::std::string* ImageProto::mutable_personname() {
  
  // @@protoc_insertion_point(field_mutable:ImageProto.personName)
  return personname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageProto::release_personname() {
  // @@protoc_insertion_point(field_release:ImageProto.personName)
  
  return personname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageProto::set_allocated_personname(::std::string* personname) {
  if (personname != NULL) {
    
  } else {
    
  }
  personname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), personname);
  // @@protoc_insertion_point(field_set_allocated:ImageProto.personName)
}

// repeated int32 data = 2;
int ImageProto::data_size() const {
  return data_.size();
}
void ImageProto::clear_data() {
  data_.Clear();
}
::google::protobuf::int32 ImageProto::data(int index) const {
  // @@protoc_insertion_point(field_get:ImageProto.data)
  return data_.Get(index);
}
void ImageProto::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:ImageProto.data)
}
void ImageProto::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:ImageProto.data)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ImageProto::data() const {
  // @@protoc_insertion_point(field_list:ImageProto.data)
  return data_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ImageProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ImageProto.data)
  return &data_;
}

// optional int32 cols = 3;
void ImageProto::clear_cols() {
  cols_ = 0;
}
::google::protobuf::int32 ImageProto::cols() const {
  // @@protoc_insertion_point(field_get:ImageProto.cols)
  return cols_;
}
void ImageProto::set_cols(::google::protobuf::int32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:ImageProto.cols)
}

// optional int32 rows = 4;
void ImageProto::clear_rows() {
  rows_ = 0;
}
::google::protobuf::int32 ImageProto::rows() const {
  // @@protoc_insertion_point(field_get:ImageProto.rows)
  return rows_;
}
void ImageProto::set_rows(::google::protobuf::int32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:ImageProto.rows)
}

inline const ImageProto* ImageProto::internal_default_instance() {
  return &ImageProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
